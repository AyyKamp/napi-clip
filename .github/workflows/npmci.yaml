name: NPM CI

on: [push]

jobs:
  test-for-new-version:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Check Version
      run: |
        echo ::set-env name=new_version::$(git show $(git log --pretty=format:'%H' -2 | sed '1q;d'):./package.json | grep "\"version\"")
        echo ::set-env name=old_version::$(git show $(git log --pretty=format:'%H' -2 | sed '2q;d'):./package.json | grep "\"version\"")
        echo ::set-env name=equals::$(if [ "$new_version" == "$old_version" ]; then echo "true"; else echo "false"; fi)
    - run: echo $equals > equals.txt
    - run: cat equals.txt
    - name: Pass $equals to other jobs
      uses: actions/upload-artifact@v1
      with:
        name: equals
        path: equals.txt
    
  build:
    needs: test-for-new-version

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - uses: actions/download-artifact@v1
      with:
        name: equals
    - run: cat equals/equals.txt
    - name: Has the version stayed the same?
      run: |
        echo ::set-env name=equals::$(cat equals/equals.txt)
        echo ::set-output name=version_stayed_same::$equals
      id: new_version

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Build
      run: npm install --build-from-source
    - name: Test on Linux
      if: runner.os == 'Linux'
      run: xvfb-run ./node_modules/.bin/jest
    - name: Test on other platforms
      if: runner.os != 'Linux'
      run: ./node_modules/.bin/jest
#    - name: Upload binaries to GitHub Releases
#      if: ${{ steps.new_version.outputs.version_stayed_same }}
#      run: npm run prebuild --upload--all ${{ secrets.NAPI_CLIP_GITHUB_TOKEN }}
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - run: echo "${{ matrix.os != 'ubuntu-latest' }}"

  publish:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Has the version stayed the same?
        run: |
          echo ::set-env name=equals::$(cat equals.txt)
          echo "::set-output name=version_stayed_same::${equals}"
        id: new_version

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Publish to NPM
        if: 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NAPI_CLIP_NPM_TOKEN }}
      
